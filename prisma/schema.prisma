// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  RESCHEDULE
  ONGOING
  COMPLETE
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  email         String
  password      String
  isDeleted     Boolean        @default(false)
  firebaseToken String         @default("")
  phoneNumber   String
  role          Role           @default(USER)
  isConfirmed   Boolean        @default(false)
  gender        Gender?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  notifications Notification[]
  picture       Picture?       @relation(fields: [pictureId], references: [id])
  adminCabang   Cabang?        @relation("CabangAdmin")
  otp           String?
  order         Order[]
  pictureId     Int?
}

model Notification {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Tags {
  id                Int                 @id @default(autoincrement())
  name              String
  Treatment         Treatment[]
  TherapistSkillTag TherapistSkillTag[]
}

model Cabang {
  id              Int               @id @default(autoincrement())
  nama            String            @unique
  phoneNumber     String
  openHour        String
  closeHour       String
  alamat          String
  picture         Picture?          @relation(fields: [pictureId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  therapist       Therapist[]
  happyHour       HappyHour?        @relation(fields: [happyHourId], references: [id])
  treatmentCabang TreatmentCabang[]

  admin       User?    @relation("CabangAdmin", fields: [adminId], references: [id])
  adminId     Int?     @unique
  vipRoom     VIPRoom? @relation(fields: [vipRoomId], references: [id], onDelete: Cascade)
  maxRandom   Int      @default(5)
  pictureId   Int?
  order       Order[]
  happyHourId Int?
  vipRoomId   Int?
}

model VIPRoom {
  id                Int      @id @default(autoincrement())
  ninety_minute     Int?
  one_twenty_minute Int?
  cabang            Cabang[]
}

model Treatment {
  id                 Int                  @id @default(autoincrement())
  category           Category             @relation(fields: [categoryId], references: [id])
  categoryId         Int
  nama               String
  durasi             Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deletedAt          DateTime?
  treatmentCabang    TreatmentCabang[]
  therapistTreatment TherapistTreatment[]
  tags               Tags?                @relation(fields: [tagsId], references: [id])
  orderDetail        OrderDetail[]
  tagsId             Int?

  @@unique([categoryId, nama], name: "unique_treatment")
}

model Banner {
  id        Int       @id @default(autoincrement())
  picture   Picture   @relation(fields: [pictureId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  pictureId Int
}

model TreatmentCabang {
  cabang         Cabang    @relation(fields: [cabangId], references: [id], onDelete: Cascade)
  cabangId       Int
  treatment      Treatment @relation(fields: [treatmentId], references: [id], onDelete: Cascade)
  treatmentId    Int
  price          Int
  happyHourPrice Int?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  @@id([cabangId, treatmentId])
}

model Category {
  id             Int         @id @default(autoincrement())
  nama           String      @unique
  happyHourPrice Boolean     @default(false)
  optional       Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  deletedAt      DateTime?
  Treatment      Treatment[]
}

model Therapist {
  id        Int       @id @default(autoincrement())
  no        String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  gender    Gender
  nama      String

  cabang             Cabang?              @relation(fields: [cabangId], references: [id])
  therapistTreatment TherapistTreatment[]
  order              Order[]
  attendance         Attendance[]
  rating             Rating[]
  cabangId           Int?
  TherapistSkillTag  TherapistSkillTag[]

  @@unique([gender, nama, deletedAt])
}

model TherapistSkillTag {
  tags        Tags      @relation(fields: [tagsId], references: [id], onDelete: Cascade)
  tagsId      Int
  therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  therapistId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@id([therapistId, tagsId])
}

model Rating {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  point       Int
  therapist   Therapist @relation(fields: [therapistId], references: [id])
  therapistId Int
}

model Attendance {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  checkIn     DateTime?
  checkOut    DateTime?
  therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  therapistId Int
}

model TherapistTreatment {
  treatment   Treatment @relation(fields: [treatmentId], references: [id])
  treatmentId Int
  therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  therapistId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@id([therapistId, treatmentId])
}

model HappyHour {
  id Int @id @default(autoincrement())

  publicHoliday   Boolean           @default(false)
  cabangId        Int
  happyHourDetail HappyHourDetail[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  cabang          Cabang[]
}

model HappyHourDetail {
  id       Int @id @default(autoincrement())
  startDay Int
  endDay   Int

  startHour   String
  endHour     String
  happyHour   HappyHour @relation(fields: [happyHourId], references: [id], onDelete: Cascade)
  happyHourId Int
}

model Picture {
  id        Int       @id @default(autoincrement())
  path      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  cabang    Cabang[]
  user      User[]
  order     Order[]
  banner    Banner[]
}

model OrderDetail {
  id          Int       @id @default(autoincrement())
  orderId     Int
  nama        String
  order       Order     @relation(fields: [orderId], references: [id])
  duration    Int
  treatment   Treatment @relation(fields: [treatmentId], references: [id])
  treatmentId Int
  price       Int // Price at the time of order
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@unique([orderId, treatmentId])
}

model Order {
  id               Int           @id @default(autoincrement())
  orderId          String        @unique @default(uuid())
  cabang           Cabang        @relation(fields: [cabangId], references: [id])
  cabangId         Int
  user             User          @relation(fields: [userId], references: [id])
  orderTime        DateTime
  durasi           Int
  totalPrice       Int           @default(0)
  picture          Picture?      @relation(fields: [pictureId], references: [id])
  orderDetails     OrderDetail[]
  therapist        Therapist?    @relation(fields: [therapistId], references: [id])
  orderStatus      OrderStatus   @default(PENDING)
  therapistGender  Gender
  guestGender      Gender
  guestPhoneNumber String        @default("")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  deletedAt        DateTime?
  confirmationTime DateTime?
  userId           Int

  therapistId Int?
  pictureId   Int?
}

model Version {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  version       String
  appStroreLink String  @default("")
  playStoreLink String  @default("")
  launched      Boolean @default(false)
}
